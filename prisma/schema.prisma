// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  usernmae String @unique
  description String?
  city String?
  school String?
  work String?
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  posts Post[]
  like Like[]
  comment Comment[]
  follower Follower[] @relation("userFollower")
  following Follower[] @relation("userFollowing")
  followRqSenter FollowerRequest[] @relation("sender")
  followRqReceiver FollowerRequest[] @relation("receiver")
  blocker Block[] @relation("blocker")
  blocked Block[] @relation("blocked")
  story Story[]
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  author    User    @relation(fields: [authorId], references: [id],onDelete: Cascade)
  authorId  Int
  like Like[]
  comment Comment[]
}

model Like {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  author    User    @relation(fields: [authorId], references: [id],onDelete: Cascade)
  authorId  Int
 post    Post    @relation(fields: [postId], references: [id],onDelete: Cascade)
  postId  Int
}
model Comment {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  author    User    @relation(fields: [authorId], references: [id],onDelete: Cascade)
  authorId  Int
 post    Post    @relation(fields: [postId], references: [id],onDelete: Cascade)
  postId  Int

}

model Follower {
   id        Int     @id @default(autoincrement())
   createdAt DateTime @default(now())
   follower User @relation("userFollower",fields: [followerId], references: [id],onDelete: Cascade)
   followerId Int
   following User @relation("userFollowing",fields: [followingId], references: [id],onDelete: Cascade)
   followingId Int
 
}

model FollowerRequest {
   id        Int     @id @default(autoincrement())
   createdAt DateTime @default(now())
   sender User @relation("sender",fields: [senderId], references: [id],onDelete: Cascade)
   senderId Int
receiver User @relation("receiver",fields: [receiverId], references: [id],onDelete: Cascade)
  receiverId Int
 
 @@unique([senderId,receiverId])
}
model Block {
   id        Int     @id @default(autoincrement())
   createdAt DateTime @default(now())
   blocker User @relation("blocker",fields: [blockerId], references: [id],onDelete: Cascade)
   blockerId Int
blocked User @relation("blocked",fields: [blockedId], references: [id],onDelete: Cascade)
  blockedId Int
 
 @@unique([blockerId,blockedId])
}

model Story {
    id        Int     @id @default(autoincrement())
    createdAt DateTime @default(now())
    expiredAt DateTime
    image String?
    author    User    @relation(fields: [authorId], references: [id],onDelete: Cascade)
  authorId  Int @unique
}